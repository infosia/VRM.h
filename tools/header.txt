/**
 * VRM.h - C++ header-only library for simple serialization/deserialization of
 * VRM 0.x and 1.0
 *
 * Distributed under the MIT License, see notice at the end of this file.
 *
 */
#pragma once

#include <string>
#include <unordered_map>
#include <vector>

namespace VRMC {
template <typename TKey, typename TTarget>
inline void ReadRequiredField(TKey &&key, nlohmann::json const &json,
                              TTarget &target) {
  const auto iter = json.find(key);
  if (iter == json.end()) {
    std::string msg = "Required field not found : " + std::string(key);
    throw std::runtime_error(msg);
  }

  target = iter->template get<TTarget>();
}

template <typename TKey, typename TTarget>
inline void ReadOptionalField(TKey &&key, nlohmann::json const &json,
                              TTarget &target) {
  const auto iter = json.find(key);
  if (iter != json.end()) {
    target = iter->template get<TTarget>();
  }
}

template <typename TValue>
inline void WriteField(std::string const &key, nlohmann::json &json,
                       TValue const &value) {
  json[key] = value;
}

template <typename TValue>
inline void WriteField(std::string const &key, nlohmann::json &json,
                       TValue const &value, TValue const &defaultValue) {
  if (value != defaultValue) {
    json[key] = value;
  }
}
} // namespace VRMC
